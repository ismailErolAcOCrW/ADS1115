
ads1115.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002634  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d4  080027d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027dc  080027dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000078  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006ae9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011bf  00000000  00000000  00026b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  00027ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000638  00000000  00000000  000283a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f2ac  00000000  00000000  000289d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000853c  00000000  00000000  00047c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be68a  00000000  00000000  000501c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010e84a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b24  00000000  00000000  0010e89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027a4 	.word	0x080027a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080027a4 	.word	0x080027a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa0a 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f812 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8a8 	bl	800062c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f878 	bl	80005d0 <MX_I2C1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read_I2C();
	voltage=Read_ADS1115();
 80004e0:	f000 f8da 	bl	8000698 <Read_ADS1115>
 80004e4:	eef0 7a40 	vmov.f32	s15, s0
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <main+0x2c>)
 80004ea:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(100);
 80004ee:	2064      	movs	r0, #100	; 0x64
 80004f0:	f000 fa6c 	bl	80009cc <HAL_Delay>
	voltage=Read_ADS1115();
 80004f4:	e7f4      	b.n	80004e0 <main+0x14>
 80004f6:	bf00      	nop
 80004f8:	2000007c 	.word	0x2000007c

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f002 f942 	bl	8002794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <SystemClock_Config+0xcc>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b22      	ldr	r3, [pc, #136]	; (80005cc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <SystemClock_Config+0xd0>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800056c:	2308      	movs	r3, #8
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fc5e 	bl	8001e44 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800058e:	f000 f8cf 	bl	8000730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2105      	movs	r1, #5
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 febf 	bl	8002334 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005bc:	f000 f8b8 	bl	8000730 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	; 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_I2C1_Init+0x50>)
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <MX_I2C1_Init+0x54>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_I2C1_Init+0x50>)
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <MX_I2C1_Init+0x58>)
 80005de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_I2C1_Init+0x50>)
 80005ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_I2C1_Init+0x50>)
 800060e:	f000 fc83 	bl	8000f18 <HAL_I2C_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000618:	f000 f88a 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000028 	.word	0x20000028
 8000624:	40005400 	.word	0x40005400
 8000628:	000186a0 	.word	0x000186a0

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_GPIO_Init+0x68>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <MX_GPIO_Init+0x68>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_GPIO_Init+0x68>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_GPIO_Init+0x68>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <MX_GPIO_Init+0x68>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_GPIO_Init+0x68>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_GPIO_Init+0x68>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <MX_GPIO_Init+0x68>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_GPIO_Init+0x68>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <Read_ADS1115>:

/* USER CODE BEGIN 4 */
float Read_ADS1115(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af02      	add	r7, sp, #8
unsigned char buffer[3];
unsigned char i2c_addr=0x90;
 800069e:	2390      	movs	r3, #144	; 0x90
 80006a0:	717b      	strb	r3, [r7, #5]
unsigned short data=0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	80fb      	strh	r3, [r7, #6]

buffer[0]=0x01;//adress bilgisinden sonraki ilk byte  config reg. bişiler yazıcaz demek
 80006a6:	2301      	movs	r3, #1
 80006a8:	703b      	strb	r3, [r7, #0]

buffer[1]=0xC0;//p0,p1 adresleri 15-8 sayfa 28 de yazıyor datasheet config Reg tablosu
 80006aa:	23c0      	movs	r3, #192	; 0xc0
 80006ac:	707b      	strb	r3, [r7, #1]
//001 olunca 4,096 aralığında okuma yapıyordu. 000 olunca ise input 6,144V olabiliyor. bundan dolayo c2 degil c0 yaptım.
buffer[2]=0x85;//p0,p1 adresleri 0-7 ilk 3 bit örnekleme hizini bildiyor 128 SPS alıcaz max 111 degeri 860 SPS olabilir.
 80006ae:	2385      	movs	r3, #133	; 0x85
 80006b0:	70bb      	strb	r3, [r7, #2]
// kalan degerleri default olarak kullandım.
HAL_I2C_Master_Transmit(&hi2c1, i2c_addr+0, (uint8_t*)buffer, 3, 100);
 80006b2:	797b      	ldrb	r3, [r7, #5]
 80006b4:	b299      	uxth	r1, r3
 80006b6:	463a      	mov	r2, r7
 80006b8:	2364      	movs	r3, #100	; 0x64
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2303      	movs	r3, #3
 80006be:	481b      	ldr	r0, [pc, #108]	; (800072c <Read_ADS1115+0x94>)
 80006c0:	f000 fd6e 	bl	80011a0 <HAL_I2C_Master_Transmit>

buffer[0]=0x00;//conversion registerina yazarak elimizdeki degerleri almak istediğimizi belirtiyoruz.,
 80006c4:	2300      	movs	r3, #0
 80006c6:	703b      	strb	r3, [r7, #0]
//bu deger 0-15 2 bytelık bir veri olacak.
HAL_I2C_Master_Transmit(&hi2c1, i2c_addr+0, (uint8_t*)buffer, 1, 100);
 80006c8:	797b      	ldrb	r3, [r7, #5]
 80006ca:	b299      	uxth	r1, r3
 80006cc:	463a      	mov	r2, r7
 80006ce:	2364      	movs	r3, #100	; 0x64
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2301      	movs	r3, #1
 80006d4:	4815      	ldr	r0, [pc, #84]	; (800072c <Read_ADS1115+0x94>)
 80006d6:	f000 fd63 	bl	80011a0 <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Receive(&hi2c1, i2c_addr+1, buffer, 2, 100);
 80006da:	797b      	ldrb	r3, [r7, #5]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	3301      	adds	r3, #1
 80006e0:	b299      	uxth	r1, r3
 80006e2:	463a      	mov	r2, r7
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2302      	movs	r3, #2
 80006ea:	4810      	ldr	r0, [pc, #64]	; (800072c <Read_ADS1115+0x94>)
 80006ec:	f000 fe56 	bl	800139c <HAL_I2C_Master_Receive>
data=(buffer[0]<<8)+buffer[1];
 80006f0:	783b      	ldrb	r3, [r7, #0]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	787b      	ldrb	r3, [r7, #1]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4413      	add	r3, r2
 80006fe:	80fb      	strh	r3, [r7, #6]
if(data==0xFFFF)data=0;
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000706:	4293      	cmp	r3, r2
 8000708:	d101      	bne.n	800070e <Read_ADS1115+0x76>
 800070a:	2300      	movs	r3, #0
 800070c:	80fb      	strh	r3, [r7, #6]
//bizim registerımız toplamda 2 byte yani 16 bitlik yani max degeri 65536.
//bu durumda bizim okuyacagımız AN0 bacagından +-6144(yani 6144*2=12288).
//toplma 12288/65535=0,1875
return (float)(0.1875*(float)data); //sonuc mV olarak döner.
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	ee07 3a90 	vmov	s15, r3
 8000714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000718:	eeb4 7a08 	vmov.f32	s14, #72	; 0x3e400000  0.1875000
 800071c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000720:	eeb0 0a67 	vmov.f32	s0, s15
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	e7fe      	b.n	8000738 <Error_Handler+0x8>
	...

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <HAL_MspInit+0x4c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <HAL_MspInit+0x4c>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6453      	str	r3, [r2, #68]	; 0x44
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <HAL_MspInit+0x4c>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_MspInit+0x4c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	6413      	str	r3, [r2, #64]	; 0x40
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_MspInit+0x4c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800077a:	2007      	movs	r0, #7
 800077c:	f000 f9fc 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800

0800078c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <HAL_I2C_MspInit+0x84>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d12c      	bne.n	8000808 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007ca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d0:	2312      	movs	r3, #18
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007dc:	2304      	movs	r3, #4
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	480c      	ldr	r0, [pc, #48]	; (8000818 <HAL_I2C_MspInit+0x8c>)
 80007e8:	f000 f9fa 	bl	8000be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40005400 	.word	0x40005400
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f890 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800089a:	490e      	ldr	r1, [pc, #56]	; (80008d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008b0:	4c0b      	ldr	r4, [pc, #44]	; (80008e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008be:	f7ff ffd7 	bl	8000870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008c2:	f001 ff43 	bl	800274c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fe01 	bl	80004cc <main>
  bx  lr    
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d8:	080027e4 	.word	0x080027e4
  ldr r2, =_sbss
 80008dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e0:	20000084 	.word	0x20000084

080008e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <HAL_Init+0x40>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_Init+0x40>)
 80008fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_Init+0x40>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f931 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff ff0e 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f93b 	bl	8000bc6 <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f911 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000080 	.word	0x20000080

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000080 	.word	0x20000080

080009cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff ffee 	bl	80009b4 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffde 	bl	80009b4 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	; (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
         );
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	; 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f7ff ff8e 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff47 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff5c 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff8e 	bl	8000acc <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5d 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffb0 	bl	8000b34 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	e16b      	b.n	8000ed4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 815a 	bne.w	8000ece <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d005      	beq.n	8000c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d130      	bne.n	8000c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	f003 0201 	and.w	r2, r3, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d017      	beq.n	8000cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d123      	bne.n	8000d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	69b9      	ldr	r1, [r7, #24]
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0203 	and.w	r2, r3, #3
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 80b4 	beq.w	8000ece <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b60      	ldr	r3, [pc, #384]	; (8000eec <HAL_GPIO_Init+0x30c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a5f      	ldr	r2, [pc, #380]	; (8000eec <HAL_GPIO_Init+0x30c>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <HAL_GPIO_Init+0x30c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d82:	4a5b      	ldr	r2, [pc, #364]	; (8000ef0 <HAL_GPIO_Init+0x310>)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a52      	ldr	r2, [pc, #328]	; (8000ef4 <HAL_GPIO_Init+0x314>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d02b      	beq.n	8000e06 <HAL_GPIO_Init+0x226>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a51      	ldr	r2, [pc, #324]	; (8000ef8 <HAL_GPIO_Init+0x318>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d025      	beq.n	8000e02 <HAL_GPIO_Init+0x222>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a50      	ldr	r2, [pc, #320]	; (8000efc <HAL_GPIO_Init+0x31c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d01f      	beq.n	8000dfe <HAL_GPIO_Init+0x21e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	; (8000f00 <HAL_GPIO_Init+0x320>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d019      	beq.n	8000dfa <HAL_GPIO_Init+0x21a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4e      	ldr	r2, [pc, #312]	; (8000f04 <HAL_GPIO_Init+0x324>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0x216>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4d      	ldr	r2, [pc, #308]	; (8000f08 <HAL_GPIO_Init+0x328>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d00d      	beq.n	8000df2 <HAL_GPIO_Init+0x212>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4c      	ldr	r2, [pc, #304]	; (8000f0c <HAL_GPIO_Init+0x32c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d007      	beq.n	8000dee <HAL_GPIO_Init+0x20e>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4b      	ldr	r2, [pc, #300]	; (8000f10 <HAL_GPIO_Init+0x330>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <HAL_GPIO_Init+0x20a>
 8000de6:	2307      	movs	r3, #7
 8000de8:	e00e      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000dea:	2308      	movs	r3, #8
 8000dec:	e00c      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000dee:	2306      	movs	r3, #6
 8000df0:	e00a      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000df2:	2305      	movs	r3, #5
 8000df4:	e008      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000df6:	2304      	movs	r3, #4
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e004      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000e06:	2300      	movs	r3, #0
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	f002 0203 	and.w	r2, r2, #3
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	4093      	lsls	r3, r2
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e18:	4935      	ldr	r1, [pc, #212]	; (8000ef0 <HAL_GPIO_Init+0x310>)
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e26:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e4a:	4a32      	ldr	r2, [pc, #200]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e74:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e9e:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec8:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b0f      	cmp	r3, #15
 8000ed8:	f67f ae90 	bls.w	8000bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40021400 	.word	0x40021400
 8000f0c:	40021800 	.word	0x40021800
 8000f10:	40021c00 	.word	0x40021c00
 8000f14:	40013c00 	.word	0x40013c00

08000f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e12b      	b.n	8001182 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d106      	bne.n	8000f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fc24 	bl	800078c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2224      	movs	r2, #36	; 0x24
 8000f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f7c:	f001 fbd2 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 8000f80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	4a81      	ldr	r2, [pc, #516]	; (800118c <HAL_I2C_Init+0x274>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d807      	bhi.n	8000f9c <HAL_I2C_Init+0x84>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4a80      	ldr	r2, [pc, #512]	; (8001190 <HAL_I2C_Init+0x278>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	bf94      	ite	ls
 8000f94:	2301      	movls	r3, #1
 8000f96:	2300      	movhi	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	e006      	b.n	8000faa <HAL_I2C_Init+0x92>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4a7d      	ldr	r2, [pc, #500]	; (8001194 <HAL_I2C_Init+0x27c>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	bf94      	ite	ls
 8000fa4:	2301      	movls	r3, #1
 8000fa6:	2300      	movhi	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0e7      	b.n	8001182 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4a78      	ldr	r2, [pc, #480]	; (8001198 <HAL_I2C_Init+0x280>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0c9b      	lsrs	r3, r3, #18
 8000fbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4a6a      	ldr	r2, [pc, #424]	; (800118c <HAL_I2C_Init+0x274>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d802      	bhi.n	8000fec <HAL_I2C_Init+0xd4>
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	e009      	b.n	8001000 <HAL_I2C_Init+0xe8>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ff2:	fb02 f303 	mul.w	r3, r2, r3
 8000ff6:	4a69      	ldr	r2, [pc, #420]	; (800119c <HAL_I2C_Init+0x284>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	099b      	lsrs	r3, r3, #6
 8000ffe:	3301      	adds	r3, #1
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	430b      	orrs	r3, r1
 8001006:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001012:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	495c      	ldr	r1, [pc, #368]	; (800118c <HAL_I2C_Init+0x274>)
 800101c:	428b      	cmp	r3, r1
 800101e:	d819      	bhi.n	8001054 <HAL_I2C_Init+0x13c>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1e59      	subs	r1, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fbb1 f3f3 	udiv	r3, r1, r3
 800102e:	1c59      	adds	r1, r3, #1
 8001030:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001034:	400b      	ands	r3, r1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00a      	beq.n	8001050 <HAL_I2C_Init+0x138>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1e59      	subs	r1, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fbb1 f3f3 	udiv	r3, r1, r3
 8001048:	3301      	adds	r3, #1
 800104a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104e:	e051      	b.n	80010f4 <HAL_I2C_Init+0x1dc>
 8001050:	2304      	movs	r3, #4
 8001052:	e04f      	b.n	80010f4 <HAL_I2C_Init+0x1dc>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d111      	bne.n	8001080 <HAL_I2C_Init+0x168>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	1e58      	subs	r0, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6859      	ldr	r1, [r3, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	440b      	add	r3, r1
 800106a:	fbb0 f3f3 	udiv	r3, r0, r3
 800106e:	3301      	adds	r3, #1
 8001070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf0c      	ite	eq
 8001078:	2301      	moveq	r3, #1
 800107a:	2300      	movne	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	e012      	b.n	80010a6 <HAL_I2C_Init+0x18e>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	1e58      	subs	r0, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6859      	ldr	r1, [r3, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	0099      	lsls	r1, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	fbb0 f3f3 	udiv	r3, r0, r3
 8001096:	3301      	adds	r3, #1
 8001098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800109c:	2b00      	cmp	r3, #0
 800109e:	bf0c      	ite	eq
 80010a0:	2301      	moveq	r3, #1
 80010a2:	2300      	movne	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_I2C_Init+0x196>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e022      	b.n	80010f4 <HAL_I2C_Init+0x1dc>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10e      	bne.n	80010d4 <HAL_I2C_Init+0x1bc>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	1e58      	subs	r0, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6859      	ldr	r1, [r3, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	440b      	add	r3, r1
 80010c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010c8:	3301      	adds	r3, #1
 80010ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d2:	e00f      	b.n	80010f4 <HAL_I2C_Init+0x1dc>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1e58      	subs	r0, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	0099      	lsls	r1, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ea:	3301      	adds	r3, #1
 80010ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	6809      	ldr	r1, [r1, #0]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69da      	ldr	r2, [r3, #28]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6911      	ldr	r1, [r2, #16]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68d2      	ldr	r2, [r2, #12]
 800112e:	4311      	orrs	r1, r2
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	430b      	orrs	r3, r1
 8001136:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695a      	ldr	r2, [r3, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2220      	movs	r2, #32
 800116e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	000186a0 	.word	0x000186a0
 8001190:	001e847f 	.word	0x001e847f
 8001194:	003d08ff 	.word	0x003d08ff
 8001198:	431bde83 	.word	0x431bde83
 800119c:	10624dd3 	.word	0x10624dd3

080011a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	461a      	mov	r2, r3
 80011ac:	460b      	mov	r3, r1
 80011ae:	817b      	strh	r3, [r7, #10]
 80011b0:	4613      	mov	r3, r2
 80011b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff fbfe 	bl	80009b4 <HAL_GetTick>
 80011b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b20      	cmp	r3, #32
 80011c4:	f040 80e0 	bne.w	8001388 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2319      	movs	r3, #25
 80011ce:	2201      	movs	r2, #1
 80011d0:	4970      	ldr	r1, [pc, #448]	; (8001394 <HAL_I2C_Master_Transmit+0x1f4>)
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 fc58 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80011de:	2302      	movs	r3, #2
 80011e0:	e0d3      	b.n	800138a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_I2C_Master_Transmit+0x50>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e0cc      	b.n	800138a <HAL_I2C_Master_Transmit+0x1ea>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b01      	cmp	r3, #1
 8001204:	d007      	beq.n	8001216 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0201 	orr.w	r2, r2, #1
 8001214:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001224:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2221      	movs	r2, #33	; 0x21
 800122a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2210      	movs	r2, #16
 8001232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	893a      	ldrh	r2, [r7, #8]
 8001246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124c:	b29a      	uxth	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <HAL_I2C_Master_Transmit+0x1f8>)
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001258:	8979      	ldrh	r1, [r7, #10]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	6a3a      	ldr	r2, [r7, #32]
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 fac2 	bl	80017e8 <I2C_MasterRequestWrite>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e08d      	b.n	800138a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001284:	e066      	b.n	8001354 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	6a39      	ldr	r1, [r7, #32]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 fcd2 	bl	8001c34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00d      	beq.n	80012b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	2b04      	cmp	r3, #4
 800129c:	d107      	bne.n	80012ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e06b      	b.n	800138a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012da:	3b01      	subs	r3, #1
 80012dc:	b29a      	uxth	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d11b      	bne.n	8001328 <HAL_I2C_Master_Transmit+0x188>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d017      	beq.n	8001328 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	b29a      	uxth	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001320:	3b01      	subs	r3, #1
 8001322:	b29a      	uxth	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	6a39      	ldr	r1, [r7, #32]
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f000 fcc2 	bl	8001cb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00d      	beq.n	8001354 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	2b04      	cmp	r3, #4
 800133e:	d107      	bne.n	8001350 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800134e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e01a      	b.n	800138a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001358:	2b00      	cmp	r3, #0
 800135a:	d194      	bne.n	8001286 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800136a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2220      	movs	r2, #32
 8001370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	e000      	b.n	800138a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001388:	2302      	movs	r3, #2
  }
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	00100002 	.word	0x00100002
 8001398:	ffff0000 	.word	0xffff0000

0800139c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	461a      	mov	r2, r3
 80013a8:	460b      	mov	r3, r1
 80013aa:	817b      	strh	r3, [r7, #10]
 80013ac:	4613      	mov	r3, r2
 80013ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fb00 	bl	80009b4 <HAL_GetTick>
 80013b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b20      	cmp	r3, #32
 80013c0:	f040 820b 	bne.w	80017da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2319      	movs	r3, #25
 80013ca:	2201      	movs	r2, #1
 80013cc:	497c      	ldr	r1, [pc, #496]	; (80015c0 <HAL_I2C_Master_Receive+0x224>)
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 fb5a 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80013da:	2302      	movs	r3, #2
 80013dc:	e1fe      	b.n	80017dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_I2C_Master_Receive+0x50>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e1f7      	b.n	80017dc <HAL_I2C_Master_Receive+0x440>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d007      	beq.n	8001412 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001420:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2222      	movs	r2, #34	; 0x22
 8001426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2210      	movs	r2, #16
 800142e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	893a      	ldrh	r2, [r7, #8]
 8001442:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001448:	b29a      	uxth	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4a5c      	ldr	r2, [pc, #368]	; (80015c4 <HAL_I2C_Master_Receive+0x228>)
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001454:	8979      	ldrh	r1, [r7, #10]
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 fa46 	bl	80018ec <I2C_MasterRequestRead>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1b8      	b.n	80017dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146e:	2b00      	cmp	r3, #0
 8001470:	d113      	bne.n	800149a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	623b      	str	r3, [r7, #32]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	623b      	str	r3, [r7, #32]
 8001486:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e18c      	b.n	80017b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d11b      	bne.n	80014da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e16c      	b.n	80017b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d11b      	bne.n	800151a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	e14c      	b.n	80017b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001540:	e138      	b.n	80017b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001546:	2b03      	cmp	r3, #3
 8001548:	f200 80f1 	bhi.w	800172e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001550:	2b01      	cmp	r3, #1
 8001552:	d123      	bne.n	800159c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 fbed 	bl	8001d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e139      	b.n	80017dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001584:	3b01      	subs	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001590:	b29b      	uxth	r3, r3
 8001592:	3b01      	subs	r3, #1
 8001594:	b29a      	uxth	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	855a      	strh	r2, [r3, #42]	; 0x2a
 800159a:	e10b      	b.n	80017b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d14e      	bne.n	8001642 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2200      	movs	r2, #0
 80015ac:	4906      	ldr	r1, [pc, #24]	; (80015c8 <HAL_I2C_Master_Receive+0x22c>)
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fa6a 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e10e      	b.n	80017dc <HAL_I2C_Master_Receive+0x440>
 80015be:	bf00      	nop
 80015c0:	00100002 	.word	0x00100002
 80015c4:	ffff0000 	.word	0xffff0000
 80015c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001604:	b29b      	uxth	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001640:	e0b8      	b.n	80017b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001648:	2200      	movs	r2, #0
 800164a:	4966      	ldr	r1, [pc, #408]	; (80017e4 <HAL_I2C_Master_Receive+0x448>)
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 fa1b 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0bf      	b.n	80017dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800166a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a4:	2200      	movs	r2, #0
 80016a6:	494f      	ldr	r1, [pc, #316]	; (80017e4 <HAL_I2C_Master_Receive+0x448>)
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f000 f9ed 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e091      	b.n	80017dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001722:	b29b      	uxth	r3, r3
 8001724:	3b01      	subs	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800172c:	e042      	b.n	80017b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 fb00 	bl	8001d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e04c      	b.n	80017dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b04      	cmp	r3, #4
 8001780:	d118      	bne.n	80017b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f47f aec2 	bne.w	8001542 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2220      	movs	r2, #32
 80017c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80017da:	2302      	movs	r3, #2
  }
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	00010004 	.word	0x00010004

080017e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	460b      	mov	r3, r1
 80017f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2b08      	cmp	r3, #8
 8001802:	d006      	beq.n	8001812 <I2C_MasterRequestWrite+0x2a>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d003      	beq.n	8001812 <I2C_MasterRequestWrite+0x2a>
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001810:	d108      	bne.n	8001824 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e00b      	b.n	800183c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	2b12      	cmp	r3, #18
 800182a:	d107      	bne.n	800183c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800183a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f91d 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00d      	beq.n	8001870 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001862:	d103      	bne.n	800186c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e035      	b.n	80018dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001878:	d108      	bne.n	800188c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800187a:	897b      	ldrh	r3, [r7, #10]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	e01b      	b.n	80018c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800188c:	897b      	ldrh	r3, [r7, #10]
 800188e:	11db      	asrs	r3, r3, #7
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f003 0306 	and.w	r3, r3, #6
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f063 030f 	orn	r3, r3, #15
 800189c:	b2da      	uxtb	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <I2C_MasterRequestWrite+0xfc>)
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f943 	bl	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e010      	b.n	80018dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018ba:	897b      	ldrh	r3, [r7, #10]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <I2C_MasterRequestWrite+0x100>)
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 f933 	bl	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	00010008 	.word	0x00010008
 80018e8:	00010002 	.word	0x00010002

080018ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	460b      	mov	r3, r1
 80018fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001910:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b08      	cmp	r3, #8
 8001916:	d006      	beq.n	8001926 <I2C_MasterRequestRead+0x3a>
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d003      	beq.n	8001926 <I2C_MasterRequestRead+0x3a>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001924:	d108      	bne.n	8001938 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e00b      	b.n	8001950 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	2b11      	cmp	r3, #17
 800193e:	d107      	bne.n	8001950 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800194e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f893 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00d      	beq.n	8001984 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001976:	d103      	bne.n	8001980 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e079      	b.n	8001a78 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800198c:	d108      	bne.n	80019a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800198e:	897b      	ldrh	r3, [r7, #10]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	b2da      	uxtb	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	e05f      	b.n	8001a60 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019a0:	897b      	ldrh	r3, [r7, #10]
 80019a2:	11db      	asrs	r3, r3, #7
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f003 0306 	and.w	r3, r3, #6
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f063 030f 	orn	r3, r3, #15
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4930      	ldr	r1, [pc, #192]	; (8001a80 <I2C_MasterRequestRead+0x194>)
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f8b9 	bl	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e054      	b.n	8001a78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4929      	ldr	r1, [pc, #164]	; (8001a84 <I2C_MasterRequestRead+0x198>)
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f8a9 	bl	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e044      	b.n	8001a78 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a12:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f831 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00d      	beq.n	8001a48 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a3a:	d103      	bne.n	8001a44 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e017      	b.n	8001a78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a48:	897b      	ldrh	r3, [r7, #10]
 8001a4a:	11db      	asrs	r3, r3, #7
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f003 0306 	and.w	r3, r3, #6
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f063 030e 	orn	r3, r3, #14
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <I2C_MasterRequestRead+0x198>)
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f865 	bl	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	00010008 	.word	0x00010008
 8001a84:	00010002 	.word	0x00010002

08001a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a98:	e025      	b.n	8001ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d021      	beq.n	8001ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa2:	f7fe ff87 	bl	80009b4 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d302      	bcc.n	8001ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d116      	bne.n	8001ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f043 0220 	orr.w	r2, r3, #32
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e023      	b.n	8001b2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d10d      	bne.n	8001b0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4013      	ands	r3, r2
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	e00c      	b.n	8001b26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4013      	ands	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bf0c      	ite	eq
 8001b1e:	2301      	moveq	r3, #1
 8001b20:	2300      	movne	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d0b6      	beq.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b44:	e051      	b.n	8001bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b54:	d123      	bne.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f043 0204 	orr.w	r2, r3, #4
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e046      	b.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d021      	beq.n	8001bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba6:	f7fe ff05 	bl	80009b4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d302      	bcc.n	8001bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d116      	bne.n	8001bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f043 0220 	orr.w	r2, r3, #32
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e020      	b.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d10c      	bne.n	8001c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	e00b      	b.n	8001c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	43da      	mvns	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf14      	ite	ne
 8001c20:	2301      	movne	r3, #1
 8001c22:	2300      	moveq	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d18d      	bne.n	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c40:	e02d      	b.n	8001c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f8ce 	bl	8001de4 <I2C_IsAcknowledgeFailed>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e02d      	b.n	8001cae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d021      	beq.n	8001c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c5a:	f7fe feab 	bl	80009b4 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d302      	bcc.n	8001c70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d116      	bne.n	8001c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f043 0220 	orr.w	r2, r3, #32
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e007      	b.n	8001cae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d1ca      	bne.n	8001c42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cc2:	e02d      	b.n	8001d20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f88d 	bl	8001de4 <I2C_IsAcknowledgeFailed>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e02d      	b.n	8001d30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cda:	d021      	beq.n	8001d20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cdc:	f7fe fe6a 	bl	80009b4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d302      	bcc.n	8001cf2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d116      	bne.n	8001d20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e007      	b.n	8001d30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d1ca      	bne.n	8001cc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d44:	e042      	b.n	8001dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d119      	bne.n	8001d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0210 	mvn.w	r2, #16
 8001d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e029      	b.n	8001ddc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d88:	f7fe fe14 	bl	80009b4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d302      	bcc.n	8001d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f043 0220 	orr.w	r2, r3, #32
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e007      	b.n	8001ddc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	d1b5      	bne.n	8001d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dfa:	d11b      	bne.n	8001e34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f043 0204 	orr.w	r2, r3, #4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e267      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d075      	beq.n	8001f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e62:	4b88      	ldr	r3, [pc, #544]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d00c      	beq.n	8001e88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6e:	4b85      	ldr	r3, [pc, #532]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d112      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7a:	4b82      	ldr	r3, [pc, #520]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e86:	d10b      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	4b7e      	ldr	r3, [pc, #504]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d05b      	beq.n	8001f4c <HAL_RCC_OscConfig+0x108>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d157      	bne.n	8001f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e242      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d106      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x74>
 8001eaa:	4b76      	ldr	r3, [pc, #472]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a75      	ldr	r2, [pc, #468]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xb0>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x98>
 8001ec2:	4b70      	ldr	r3, [pc, #448]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6f      	ldr	r2, [pc, #444]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6d      	ldr	r3, [pc, #436]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6c      	ldr	r2, [pc, #432]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xb0>
 8001edc:	4b69      	ldr	r3, [pc, #420]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a68      	ldr	r2, [pc, #416]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b66      	ldr	r3, [pc, #408]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a65      	ldr	r2, [pc, #404]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fd5a 	bl	80009b4 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f04:	f7fe fd56 	bl	80009b4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e207      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b5b      	ldr	r3, [pc, #364]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xc0>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe fd46 	bl	80009b4 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7fe fd42 	bl	80009b4 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1f3      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b51      	ldr	r3, [pc, #324]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0xe8>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d063      	beq.n	8002022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f66:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11c      	bne.n	8001fac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f72:	4b44      	ldr	r3, [pc, #272]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	4b41      	ldr	r3, [pc, #260]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x152>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e1c7      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4937      	ldr	r1, [pc, #220]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	e03a      	b.n	8002022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b34      	ldr	r3, [pc, #208]	; (8002088 <HAL_RCC_OscConfig+0x244>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7fe fcfb 	bl	80009b4 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7fe fcf7 	bl	80009b4 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e1a8      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4925      	ldr	r1, [pc, #148]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RCC_OscConfig+0x244>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fcda 	bl	80009b4 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002004:	f7fe fcd6 	bl	80009b4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e187      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d036      	beq.n	800209c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d016      	beq.n	8002064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_RCC_OscConfig+0x248>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203c:	f7fe fcba 	bl	80009b4 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe fcb6 	bl	80009b4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e167      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_OscConfig+0x240>)
 8002058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x200>
 8002062:	e01b      	b.n	800209c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_OscConfig+0x248>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7fe fca3 	bl	80009b4 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	e00e      	b.n	8002090 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002072:	f7fe fc9f 	bl	80009b4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d907      	bls.n	8002090 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e150      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
 8002084:	40023800 	.word	0x40023800
 8002088:	42470000 	.word	0x42470000
 800208c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	4b88      	ldr	r3, [pc, #544]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ea      	bne.n	8002072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8097 	beq.w	80021d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ae:	4b81      	ldr	r3, [pc, #516]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10f      	bne.n	80020da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	4b7d      	ldr	r3, [pc, #500]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a7c      	ldr	r2, [pc, #496]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b7a      	ldr	r3, [pc, #488]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d6:	2301      	movs	r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	4b77      	ldr	r3, [pc, #476]	; (80022b8 <HAL_RCC_OscConfig+0x474>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d118      	bne.n	8002118 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e6:	4b74      	ldr	r3, [pc, #464]	; (80022b8 <HAL_RCC_OscConfig+0x474>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a73      	ldr	r2, [pc, #460]	; (80022b8 <HAL_RCC_OscConfig+0x474>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f2:	f7fe fc5f 	bl	80009b4 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fa:	f7fe fc5b 	bl	80009b4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e10c      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x474>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x2ea>
 8002120:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002124:	4a63      	ldr	r2, [pc, #396]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6713      	str	r3, [r2, #112]	; 0x70
 800212c:	e01c      	b.n	8002168 <HAL_RCC_OscConfig+0x324>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b05      	cmp	r3, #5
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x30c>
 8002136:	4b5f      	ldr	r3, [pc, #380]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	4a5e      	ldr	r2, [pc, #376]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6713      	str	r3, [r2, #112]	; 0x70
 8002142:	4b5c      	ldr	r3, [pc, #368]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a5b      	ldr	r2, [pc, #364]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0x324>
 8002150:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a57      	ldr	r2, [pc, #348]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	4b55      	ldr	r3, [pc, #340]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a54      	ldr	r2, [pc, #336]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002162:	f023 0304 	bic.w	r3, r3, #4
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d015      	beq.n	800219c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7fe fc20 	bl	80009b4 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002176:	e00a      	b.n	800218e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7fe fc1c 	bl	80009b4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0cb      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	4b49      	ldr	r3, [pc, #292]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0ee      	beq.n	8002178 <HAL_RCC_OscConfig+0x334>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219c:	f7fe fc0a 	bl	80009b4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7fe fc06 	bl	80009b4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0b5      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ba:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ee      	bne.n	80021a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021cc:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	4a38      	ldr	r2, [pc, #224]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 80021d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a1 	beq.w	8002324 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021e2:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d05c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d141      	bne.n	800227a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_RCC_OscConfig+0x478>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7fe fbda 	bl	80009b4 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe fbd6 	bl	80009b4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e087      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	019b      	lsls	r3, r3, #6
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	085b      	lsrs	r3, r3, #1
 800223a:	3b01      	subs	r3, #1
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	491b      	ldr	r1, [pc, #108]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HAL_RCC_OscConfig+0x478>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7fe fbaf 	bl	80009b4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe fbab 	bl	80009b4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e05c      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x416>
 8002278:	e054      	b.n	8002324 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_RCC_OscConfig+0x478>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe fb98 	bl	80009b4 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002288:	f7fe fb94 	bl	80009b4 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e045      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_RCC_OscConfig+0x470>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x444>
 80022a6:	e03d      	b.n	8002324 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e038      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40007000 	.word	0x40007000
 80022bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x4ec>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d028      	beq.n	8002320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d121      	bne.n	8002320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d11a      	bne.n	8002320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d111      	bne.n	8002320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	3b01      	subs	r3, #1
 800230a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0cc      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b68      	ldr	r3, [pc, #416]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d90c      	bls.n	8002370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b65      	ldr	r3, [pc, #404]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b8      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a52      	ldr	r2, [pc, #328]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	494d      	ldr	r1, [pc, #308]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d044      	beq.n	8002454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d119      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e07f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e067      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4934      	ldr	r1, [pc, #208]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002424:	f7fe fac6 	bl	80009b4 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7fe fac2 	bl	80009b4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e04f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d20c      	bcs.n	800247c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b22      	ldr	r3, [pc, #136]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e032      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4916      	ldr	r1, [pc, #88]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ba:	f000 f821 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	490a      	ldr	r1, [pc, #40]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	5ccb      	ldrb	r3, [r1, r3]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fa26 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023c00 	.word	0x40023c00
 80024f0:	40023800 	.word	0x40023800
 80024f4:	080027bc 	.word	0x080027bc
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002504:	b094      	sub	sp, #80	; 0x50
 8002506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
 800250c:	2300      	movs	r3, #0
 800250e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002510:	2300      	movs	r3, #0
 8002512:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002518:	4b79      	ldr	r3, [pc, #484]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d00d      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x40>
 8002524:	2b08      	cmp	r3, #8
 8002526:	f200 80e1 	bhi.w	80026ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x34>
 800252e:	2b04      	cmp	r3, #4
 8002530:	d003      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x3a>
 8002532:	e0db      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_RCC_GetSysClockFreq+0x204>)
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002538:	e0db      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800253a:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_GetSysClockFreq+0x208>)
 800253c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800253e:	e0d8      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002540:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800254a:	4b6d      	ldr	r3, [pc, #436]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002556:	4b6a      	ldr	r3, [pc, #424]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	099b      	lsrs	r3, r3, #6
 800255c:	2200      	movs	r2, #0
 800255e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
 800256e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002572:	4622      	mov	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	f04f 0000 	mov.w	r0, #0
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	0159      	lsls	r1, r3, #5
 8002580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002584:	0150      	lsls	r0, r2, #5
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4621      	mov	r1, r4
 800258c:	1a51      	subs	r1, r2, r1
 800258e:	6139      	str	r1, [r7, #16]
 8002590:	4629      	mov	r1, r5
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025a4:	4659      	mov	r1, fp
 80025a6:	018b      	lsls	r3, r1, #6
 80025a8:	4651      	mov	r1, sl
 80025aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ae:	4651      	mov	r1, sl
 80025b0:	018a      	lsls	r2, r1, #6
 80025b2:	4651      	mov	r1, sl
 80025b4:	ebb2 0801 	subs.w	r8, r2, r1
 80025b8:	4659      	mov	r1, fp
 80025ba:	eb63 0901 	sbc.w	r9, r3, r1
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025d2:	4690      	mov	r8, r2
 80025d4:	4699      	mov	r9, r3
 80025d6:	4623      	mov	r3, r4
 80025d8:	eb18 0303 	adds.w	r3, r8, r3
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	462b      	mov	r3, r5
 80025e0:	eb49 0303 	adc.w	r3, r9, r3
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025f2:	4629      	mov	r1, r5
 80025f4:	024b      	lsls	r3, r1, #9
 80025f6:	4621      	mov	r1, r4
 80025f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025fc:	4621      	mov	r1, r4
 80025fe:	024a      	lsls	r2, r1, #9
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002606:	2200      	movs	r2, #0
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
 800260a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800260c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002610:	f7fd fdda 	bl	80001c8 <__aeabi_uldivmod>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4613      	mov	r3, r2
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261c:	e058      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	2200      	movs	r2, #0
 8002626:	4618      	mov	r0, r3
 8002628:	4611      	mov	r1, r2
 800262a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800262e:	623b      	str	r3, [r7, #32]
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
 8002634:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002638:	4642      	mov	r2, r8
 800263a:	464b      	mov	r3, r9
 800263c:	f04f 0000 	mov.w	r0, #0
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	0159      	lsls	r1, r3, #5
 8002646:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264a:	0150      	lsls	r0, r2, #5
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4641      	mov	r1, r8
 8002652:	ebb2 0a01 	subs.w	sl, r2, r1
 8002656:	4649      	mov	r1, r9
 8002658:	eb63 0b01 	sbc.w	fp, r3, r1
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002668:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800266c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002670:	ebb2 040a 	subs.w	r4, r2, sl
 8002674:	eb63 050b 	sbc.w	r5, r3, fp
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	00eb      	lsls	r3, r5, #3
 8002682:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002686:	00e2      	lsls	r2, r4, #3
 8002688:	4614      	mov	r4, r2
 800268a:	461d      	mov	r5, r3
 800268c:	4643      	mov	r3, r8
 800268e:	18e3      	adds	r3, r4, r3
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	464b      	mov	r3, r9
 8002694:	eb45 0303 	adc.w	r3, r5, r3
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026a6:	4629      	mov	r1, r5
 80026a8:	028b      	lsls	r3, r1, #10
 80026aa:	4621      	mov	r1, r4
 80026ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026b0:	4621      	mov	r1, r4
 80026b2:	028a      	lsls	r2, r1, #10
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ba:	2200      	movs	r2, #0
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	61fa      	str	r2, [r7, #28]
 80026c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c4:	f7fd fd80 	bl	80001c8 <__aeabi_uldivmod>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4613      	mov	r3, r2
 80026ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	3301      	adds	r3, #1
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ea:	e002      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3750      	adds	r7, #80	; 0x50
 80026f8:	46bd      	mov	sp, r7
 80026fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	00f42400 	.word	0x00f42400
 8002708:	007a1200 	.word	0x007a1200

0800270c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_RCC_GetHCLKFreq+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000000 	.word	0x20000000

08002724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002728:	f7ff fff0 	bl	800270c <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0a9b      	lsrs	r3, r3, #10
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	080027cc 	.word	0x080027cc

0800274c <__libc_init_array>:
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	4d0d      	ldr	r5, [pc, #52]	; (8002784 <__libc_init_array+0x38>)
 8002750:	4c0d      	ldr	r4, [pc, #52]	; (8002788 <__libc_init_array+0x3c>)
 8002752:	1b64      	subs	r4, r4, r5
 8002754:	10a4      	asrs	r4, r4, #2
 8002756:	2600      	movs	r6, #0
 8002758:	42a6      	cmp	r6, r4
 800275a:	d109      	bne.n	8002770 <__libc_init_array+0x24>
 800275c:	4d0b      	ldr	r5, [pc, #44]	; (800278c <__libc_init_array+0x40>)
 800275e:	4c0c      	ldr	r4, [pc, #48]	; (8002790 <__libc_init_array+0x44>)
 8002760:	f000 f820 	bl	80027a4 <_init>
 8002764:	1b64      	subs	r4, r4, r5
 8002766:	10a4      	asrs	r4, r4, #2
 8002768:	2600      	movs	r6, #0
 800276a:	42a6      	cmp	r6, r4
 800276c:	d105      	bne.n	800277a <__libc_init_array+0x2e>
 800276e:	bd70      	pop	{r4, r5, r6, pc}
 8002770:	f855 3b04 	ldr.w	r3, [r5], #4
 8002774:	4798      	blx	r3
 8002776:	3601      	adds	r6, #1
 8002778:	e7ee      	b.n	8002758 <__libc_init_array+0xc>
 800277a:	f855 3b04 	ldr.w	r3, [r5], #4
 800277e:	4798      	blx	r3
 8002780:	3601      	adds	r6, #1
 8002782:	e7f2      	b.n	800276a <__libc_init_array+0x1e>
 8002784:	080027dc 	.word	0x080027dc
 8002788:	080027dc 	.word	0x080027dc
 800278c:	080027dc 	.word	0x080027dc
 8002790:	080027e0 	.word	0x080027e0

08002794 <memset>:
 8002794:	4402      	add	r2, r0
 8002796:	4603      	mov	r3, r0
 8002798:	4293      	cmp	r3, r2
 800279a:	d100      	bne.n	800279e <memset+0xa>
 800279c:	4770      	bx	lr
 800279e:	f803 1b01 	strb.w	r1, [r3], #1
 80027a2:	e7f9      	b.n	8002798 <memset+0x4>

080027a4 <_init>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr

080027b0 <_fini>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr
